==4084== Memcheck, a memory error detector
==4084== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==4084== Using Valgrind-3.19.0-8d3c8034b8-20220411 and LibVEX; rerun with -h for copyright info
==4084== Command: ./a.out
==4084== Parent PID: 2347
==4084== 
--4084-- 
--4084-- Valgrind options:
--4084--    --leak-check=full
--4084--    --show-leak-kinds=all
--4084--    --track-origins=yes
--4084--    --verbose
--4084--    --log-file=valgrind-out.txt
--4084-- Contents of /proc/version:
--4084--   Linux version 6.1.69-rpiedrah-pa2 (rpiedrah@DebianCS492) (gcc (Debian 12.2.0-14) 12.2.0, GNU ld (GNU Binutils for Debian) 2.40) #5 SMP PREEMPT_DYNAMIC Sun Feb 11 22:48:22 EST 2024
--4084-- 
--4084-- Arch and hwcaps: AMD64, LittleEndian, amd64-cx16-lzcnt-rdtscp-sse3-ssse3-avx-avx2-bmi-rdrand-rdseed
--4084-- Page sizes: currently 4096, max supported 4096
--4084-- Valgrind library directory: /usr/libexec/valgrind
--4084-- Reading syms from /mnt/VMshare/a.out
--4084-- Reading syms from /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2
--4084--   Considering /usr/lib/debug/.build-id/38/e7d4a67acf053c794b3b8094e6900b5163f37d.debug ..
--4084--   .. build-id is valid
--4084-- Reading syms from /usr/libexec/valgrind/memcheck-amd64-linux
--4084--   Considering /usr/lib/debug/.build-id/82/26c2aa6b808ebd5a6fafb694a7fb3287f33590.debug ..
--4084--   .. build-id is valid
--4084--    object doesn't have a dynamic symbol table
--4084-- Scheduler: using generic scheduler lock implementation.
--4084-- Reading suppressions file: /usr/libexec/valgrind/default.supp
==4084== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-4084-by-rpiedrah-on-???
==4084== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-4084-by-rpiedrah-on-???
==4084== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-4084-by-rpiedrah-on-???
==4084== 
==4084== TO CONTROL THIS PROCESS USING vgdb (which you probably
==4084== don't want to do, unless you know exactly what you're doing,
==4084== or are doing some strange experiment):
==4084==   /usr/bin/vgdb --pid=4084 ...command...
==4084== 
==4084== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==4084==   /path/to/gdb ./a.out
==4084== and then give GDB the following command
==4084==   target remote | /usr/bin/vgdb --pid=4084
==4084== --pid is optional if only one valgrind process is running
==4084== 
--4084-- REDIR: 0x40236e0 (ld-linux-x86-64.so.2:strlen) redirected to 0x580bb0e2 (vgPlain_amd64_linux_REDIR_FOR_strlen)
--4084-- REDIR: 0x4021ec0 (ld-linux-x86-64.so.2:index) redirected to 0x580bb0fc (vgPlain_amd64_linux_REDIR_FOR_index)
--4084-- Reading syms from /usr/libexec/valgrind/vgpreload_core-amd64-linux.so
--4084--   Considering /usr/lib/debug/.build-id/ad/f1388be4d8781737b0c83fe111a5a9c6e930aa.debug ..
--4084--   .. build-id is valid
--4084-- Reading syms from /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so
--4084--   Considering /usr/lib/debug/.build-id/d8/ec66cffcb23a75c3f15940674d6028709121f8.debug ..
--4084--   .. build-id is valid
==4084== WARNING: new redirection conflicts with existing -- ignoring it
--4084--     old: 0x040236e0 (strlen              ) R-> (0000.0) 0x580bb0e2 vgPlain_amd64_linux_REDIR_FOR_strlen
--4084--     new: 0x040236e0 (strlen              ) R-> (2007.0) 0x048468a0 strlen
--4084-- REDIR: 0x40220e0 (ld-linux-x86-64.so.2:strcmp) redirected to 0x4847780 (strcmp)
--4084-- REDIR: 0x4021350 (ld-linux-x86-64.so.2:mempcpy) redirected to 0x484b1a0 (mempcpy)
--4084-- Reading syms from /usr/lib/x86_64-linux-gnu/libc.so.6
--4084--   Considering /usr/lib/debug/.build-id/82/ce4e6e4ef08fa58a3535f7437bd3e592db5ac0.debug ..
--4084--   .. build-id is valid
==4084== WARNING: new redirection conflicts with existing -- ignoring it
--4084--     old: 0x048fc540 (memalign            ) R-> (1011.0) 0x04845bc0 memalign
--4084--     new: 0x048fc540 (memalign            ) R-> (1017.0) 0x04845b90 aligned_alloc
==4084== WARNING: new redirection conflicts with existing -- ignoring it
--4084--     old: 0x048fc540 (memalign            ) R-> (1011.0) 0x04845bc0 memalign
--4084--     new: 0x048fc540 (memalign            ) R-> (1017.0) 0x04845b60 aligned_alloc
--4084-- REDIR: 0x4902490 (libc.so.6:strnlen) redirected to 0x48371b0 (_vgnU_ifunc_wrapper)
--4084-- REDIR: 0x4902520 (libc.so.6:strpbrk) redirected to 0x48371b0 (_vgnU_ifunc_wrapper)
--4084-- REDIR: 0x4900640 (libc.so.6:strcmp) redirected to 0x48371b0 (_vgnU_ifunc_wrapper)
--4084-- REDIR: 0x4915420 (libc.so.6:wcsnlen) redirected to 0x48371b0 (_vgnU_ifunc_wrapper)
--4084-- REDIR: 0x48ff780 (libc.so.6:memset) redirected to 0x48371b0 (_vgnU_ifunc_wrapper)
--4084-- REDIR: 0x4913d60 (libc.so.6:wcslen) redirected to 0x48371b0 (_vgnU_ifunc_wrapper)
--4084-- REDIR: 0x48fedb0 (libc.so.6:memcpy@@GLIBC_2.14) redirected to 0x48371b0 (_vgnU_ifunc_wrapper)
--4084-- REDIR: 0x4913b90 (libc.so.6:wcschr) redirected to 0x48371b0 (_vgnU_ifunc_wrapper)
--4084-- REDIR: 0x4900530 (libc.so.6:index) redirected to 0x48371b0 (_vgnU_ifunc_wrapper)
--4084-- REDIR: 0x4902550 (libc.so.6:rindex) redirected to 0x48371b0 (_vgnU_ifunc_wrapper)
--4084-- REDIR: 0x4913c20 (libc.so.6:wcscmp) redirected to 0x48371b0 (_vgnU_ifunc_wrapper)
--4084-- REDIR: 0x48ff9c0 (libc.so.6:stpncpy) redirected to 0x48371b0 (_vgnU_ifunc_wrapper)
--4084-- REDIR: 0x4914170 (libc.so.6:wmemchr) redirected to 0x48371b0 (_vgnU_ifunc_wrapper)
--4084-- REDIR: 0x4902340 (libc.so.6:strncmp) redirected to 0x48371b0 (_vgnU_ifunc_wrapper)
--4084-- REDIR: 0x48ffa30 (libc.so.6:strcasecmp) redirected to 0x48371b0 (_vgnU_ifunc_wrapper)
--4084-- REDIR: 0x49018a0 (libc.so.6:strcspn) redirected to 0x48371b0 (_vgnU_ifunc_wrapper)
--4084-- REDIR: 0x4913cb0 (libc.so.6:wcscpy) redirected to 0x48371b0 (_vgnU_ifunc_wrapper)
--4084-- REDIR: 0x49004b0 (libc.so.6:strcat) redirected to 0x48371b0 (_vgnU_ifunc_wrapper)
--4084-- REDIR: 0x4902230 (libc.so.6:strncasecmp_l) redirected to 0x48371b0 (_vgnU_ifunc_wrapper)
--4084-- REDIR: 0x48fecc0 (libc.so.6:bcmp) redirected to 0x48371b0 (_vgnU_ifunc_wrapper)
--4084-- REDIR: 0x48ff6f0 (libc.so.6:memrchr) redirected to 0x48371b0 (_vgnU_ifunc_wrapper)
--4084-- REDIR: 0x49005b0 (libc.so.6:strchrnul) redirected to 0x48371b0 (_vgnU_ifunc_wrapper)
--4084-- REDIR: 0x4901820 (libc.so.6:strcpy) redirected to 0x48371b0 (_vgnU_ifunc_wrapper)
--4084-- REDIR: 0x48ffad0 (libc.so.6:strcasecmp_l) redirected to 0x48371b0 (_vgnU_ifunc_wrapper)
--4084-- REDIR: 0x4902100 (libc.so.6:strlen) redirected to 0x48371b0 (_vgnU_ifunc_wrapper)
--4084-- REDIR: 0x49023e0 (libc.so.6:strncpy) redirected to 0x48371b0 (_vgnU_ifunc_wrapper)
--4084-- REDIR: 0x48ff940 (libc.so.6:stpcpy) redirected to 0x48371b0 (_vgnU_ifunc_wrapper)
--4084-- REDIR: 0x48ff4d0 (libc.so.6:memmove) redirected to 0x48371b0 (_vgnU_ifunc_wrapper)
==4084== Preferring higher priority redirection:
--4084--     old: 0x049b5780 (__memcpy_avx_unalign) R-> (2018.0) 0x04848a60 __memcpy_avx_unaligned_erms
--4084--     new: 0x049b5780 (__memcpy_avx_unalign) R-> (2018.1) 0x0484a2b0 memmove
--4084-- REDIR: 0x48fec40 (libc.so.6:memchr) redirected to 0x48371b0 (_vgnU_ifunc_wrapper)
--4084-- REDIR: 0x4902710 (libc.so.6:strspn) redirected to 0x48371b0 (_vgnU_ifunc_wrapper)
--4084-- REDIR: 0x48ff5e0 (libc.so.6:mempcpy) redirected to 0x48371b0 (_vgnU_ifunc_wrapper)
--4084-- REDIR: 0x4902190 (libc.so.6:strncasecmp) redirected to 0x48371b0 (_vgnU_ifunc_wrapper)
--4084-- REDIR: 0x48ff880 (libc.so.6:rawmemchr) redirected to 0x48371b0 (_vgnU_ifunc_wrapper)
--4084-- REDIR: 0x49bb850 (libc.so.6:__strrchr_avx2) redirected to 0x48462e0 (rindex)
--4084-- REDIR: 0x49b8420 (libc.so.6:__strchrnul_avx2) redirected to 0x484aca0 (strchrnul)
--4084-- REDIR: 0x48fb860 (libc.so.6:malloc) redirected to 0x4840740 (malloc)
--4084-- REDIR: 0x49b5730 (libc.so.6:__mempcpy_avx_unaligned_erms) redirected to 0x484adb0 (mempcpy)
--4084-- REDIR: 0x48fbe20 (libc.so.6:free) redirected to 0x4843110 (free)
--4084-- REDIR: 0x49b5780 (libc.so.6:__memcpy_avx_unaligned_erms) redirected to 0x484a2b0 (memmove)
==4084== Invalid write of size 8
==4084==    at 0x1091FA: addQ (edf.c:32)
==4084==    by 0x10999B: main (edf.c:161)
==4084==  Address 0x4a47b10 is 0 bytes after a block of size 480 alloc'd
==4084==    at 0x48407B4: malloc (vg_replace_malloc.c:381)
==4084==    by 0x1095D5: main (edf.c:126)
==4084== 
==4084== Invalid write of size 8
==4084==    at 0x1091FD: addQ (edf.c:32)
==4084==    by 0x10999B: main (edf.c:161)
==4084==  Address 0x4a47b18 is 8 bytes after a block of size 480 alloc'd
==4084==    at 0x48407B4: malloc (vg_replace_malloc.c:381)
==4084==    by 0x1095D5: main (edf.c:126)
==4084== 
==4084== Invalid write of size 8
==4084==    at 0x109205: addQ (edf.c:32)
==4084==    by 0x10999B: main (edf.c:161)
==4084==  Address 0x4a47b20 is 16 bytes after a block of size 480 alloc'd
==4084==    at 0x48407B4: malloc (vg_replace_malloc.c:381)
==4084==    by 0x1095D5: main (edf.c:126)
==4084== 
==4084== Invalid read of size 4
==4084==    at 0x1094BB: compare2 (edf.c:92)
==4084==    by 0x48A2AF0: msort_with_tmp.part.0 (msort.c:104)
==4084==    by 0x48A29C0: msort_with_tmp (msort.c:44)
==4084==    by 0x48A29C0: msort_with_tmp.part.0 (msort.c:53)
==4084==    by 0x48A29C0: msort_with_tmp (msort.c:44)
==4084==    by 0x48A29C0: msort_with_tmp.part.0 (msort.c:53)
==4084==    by 0x48A29C0: msort_with_tmp (msort.c:44)
==4084==    by 0x48A29C0: msort_with_tmp.part.0 (msort.c:53)
==4084==    by 0x48A29C0: msort_with_tmp (msort.c:44)
==4084==    by 0x48A29C0: msort_with_tmp.part.0 (msort.c:53)
==4084==    by 0x48A2D35: msort_with_tmp (msort.c:44)
==4084==    by 0x48A2D35: qsort_r (msort.c:296)
==4084==    by 0x109A0B: main (edf.c:170)
==4084==  Address 0x4a47b18 is 8 bytes after a block of size 480 alloc'd
==4084==    at 0x48407B4: malloc (vg_replace_malloc.c:381)
==4084==    by 0x1095D5: main (edf.c:126)
==4084== 

valgrind: m_mallocfree.c:303 (get_bszB_as_is): Assertion 'bszB_lo == bszB_hi' failed.
valgrind: Heap block lo/hi size mismatch: lo = 544, hi = 77887716.
This is probably caused by your program erroneously writing past the
end of a heap block and corrupting heap metadata.  If you fix any
invalid writes reported by Memcheck, this assertion failure will
probably go away.  Please try that before reporting this as a bug.


host stacktrace:
==4084==    at 0x580429AA: show_sched_status_wrk (m_libcassert.c:406)
==4084==    by 0x58042AC7: report_and_quit (m_libcassert.c:477)
==4084==    by 0x58042C57: vgPlain_assert_fail (m_libcassert.c:543)
==4084==    by 0x5804C708: get_bszB_as_is (m_mallocfree.c:303)
==4084==    by 0x5804C708: is_inuse_block (m_mallocfree.c:331)
==4084==    by 0x5804C708: vgPlain_describe_arena_addr (m_mallocfree.c:1604)
==4084==    by 0x5803B31A: vgPlain_describe_addr (m_addrinfo.c:185)
==4084==    by 0x58039A1E: vgMemCheck_update_Error_extra (mc_errors.c:1185)
==4084==    by 0x5803E1F5: vgPlain_maybe_record_error (m_errormgr.c:822)
==4084==    by 0x58038CF8: vgMemCheck_record_address_error (mc_errors.c:765)
==4084==    by 0x5800F063: mc_LOADVn_slow (mc_main.c:1557)
==4084==    by 0x100A0558D0: ???
==4084==    by 0x1008DA9F2F: ???
==4084==    by 0x1008DA9F17: ???
==4084==    by 0x1008DA9F2F: ???
==4084==    by 0x1C0F: ???
==4084==    by 0x1008ECEC5F: ???
==4084==    by 0x205: ???
==4084==    by 0x1008DA93AF: ???
==4084==    by 0x1008ECF01F: ???
==4084==    by 0x100A0345AF: ???

sched status:
  running_tid=1

Thread 1: status = VgTs_Runnable (lwpid 4084)
==4084==    at 0x1094C5: compare2 (edf.c:93)
==4084==    by 0x48A2AF0: msort_with_tmp.part.0 (msort.c:104)
==4084==    by 0x48A29C0: msort_with_tmp (msort.c:44)
==4084==    by 0x48A29C0: msort_with_tmp.part.0 (msort.c:53)
==4084==    by 0x48A29C0: msort_with_tmp (msort.c:44)
==4084==    by 0x48A29C0: msort_with_tmp.part.0 (msort.c:53)
==4084==    by 0x48A29C0: msort_with_tmp (msort.c:44)
==4084==    by 0x48A29C0: msort_with_tmp.part.0 (msort.c:53)
==4084==    by 0x48A29C0: msort_with_tmp (msort.c:44)
==4084==    by 0x48A29C0: msort_with_tmp.part.0 (msort.c:53)
==4084==    by 0x48A2D35: msort_with_tmp (msort.c:44)
==4084==    by 0x48A2D35: qsort_r (msort.c:296)
==4084==    by 0x109A0B: main (edf.c:170)
client stack range: [0x1FFEFFE000 0x1FFF000FFF] client SP: 0x1FFEFFF9F0
valgrind stack range: [0x1008CAA000 0x1008DA9FFF] top usage: 18792 of 1048576


Note: see also the FAQ in the source distribution.
It contains workarounds to several common problems.
In particular, if Valgrind aborted or crashed after
identifying problems in your program, there's a good chance
that fixing those problems will prevent Valgrind aborting or
crashing, especially if it happened in m_mallocfree.c.

If that doesn't help, please report this bug to: www.valgrind.org

In the bug report, send all the above text, the valgrind
version, and what OS and version you are using.  Thanks.

